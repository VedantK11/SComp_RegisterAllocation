//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import visitor.GJDepthFirst_v1;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst_v2<R,A> implements GJVisitor<R,A> {
   
   //stack to store current class 
   public static Stack<String> currentClass = new Stack<String>();
   
   //stack to store current method
   public static Stack<String> currentMethod = new Stack<String>();
   
   //search the variable in registerAllocatedVariables and return the index
   public static int searchVarRegister(String className, String methodName,String Var) {
      if (GJDepthFirst_v1.registerAllocatedVariables.containsKey(className) && GJDepthFirst_v1.registerAllocatedVariables.get(className).containsKey(methodName)) {
      for (int i = 0;i<GJDepthFirst_v1.registerAllocatedVariables.get(className).get(methodName).size(); i++) {
         if (GJDepthFirst_v1.registerAllocatedVariables.get(className).get(currentMethod.peek()).get(i).varName.equals(Var)) {
            return GJDepthFirst_v1.registerAllocatedVariables.get(className).get(currentMethod.peek()).get(i).regAlloc;
         }
      }
   }
   return -1;
   }

   public static int searchVarSpill(String className, String methodName,String Var) {
      if (GJDepthFirst_v1.spilledVariables.containsKey(className) && GJDepthFirst_v1.spilledVariables.get(className).containsKey(methodName)) {
         for (int i = 0;i<GJDepthFirst_v1.spilledVariables.get(className).get(methodName).size(); i++) {
            if (GJDepthFirst_v1.spilledVariables.get(className).get(currentMethod.peek()).get(i).varName.equals(Var)) {
               // return i;
               return GJDepthFirst_v1.spilledVariables.get(className).get(currentMethod.peek()).get(i).spillLocation;
            }
         }
         
      }
      return -1;
   }

   //function to print the load Statement for registerAllocated variable and spilled variable
   public static void printLoadStatement(String className, String methodName, String var) {
      int reg_index = searchVarRegister(className,methodName,var);
      int spill_index = searchVarSpill(className,methodName,var);
      //print the registerAllocated variable
      // System.out.println("\nRegister Allocated Variables start");
      // for (int i = 0; i<GJDepthFirst_v1.registerAllocatedVariables.get(className).get(methodName).size(); i++) {
      //    System.out.println(GJDepthFirst_v1.registerAllocatedVariables.get(className).get(methodName).get(i).varName + " = R" + GJDepthFirst_v1.registerAllocatedVariables.get(className).get(methodName).get(i).regAlloc + ";");
      // }
      // System.out.println("Register Allocated Variables end");
      if (reg_index>-1) {
         System.out.print("R" + reg_index );
      }
      if (spill_index>-1) {
         System.out.print("load(" + spill_index + ")");  
      }
      if (reg_index == -1 && spill_index == -1) {
         System.out.print(var);
      }
   }
   //check if the particular variable is registerAllocated variable or spilled variable
   public static String morphVar(String className, String methodName, String var) { 
      int reg_index = searchVarRegister(className,methodName,var);
      int spill_index = searchVarSpill(className,methodName,var);
      if (GJDepthFirst_v1.registerAllocatedVariables.containsKey(className) && GJDepthFirst_v1.registerAllocatedVariables.get(className).containsKey(methodName) && reg_index>-1) {
         return GJDepthFirst_v1.registerAllocatedVariables.get(className).get(methodName).get(reg_index).varName;
      }
      else if (GJDepthFirst_v1.spilledVariables.containsKey(className) && GJDepthFirst_v1.spilledVariables.get(className).containsKey(methodName) && spill_index>-1) {
         return GJDepthFirst_v1.spilledVariables.get(className).get(methodName).get(spill_index).varName;
      }
      else {
         return var;
      }
   }

      public R visit(NodeList n, A argu) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
      }
      return _ret;
   }
   
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> <REGLIMIT>
    * f1 -> MainClass()
    * f2 -> ( TypeDeclaration() )*
    * f3 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println(n.f0.tokenImage);
      System.out.println("import static a3.Memory.*;");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      //push current class and main method
      currentClass.push(n.f1.f0.toString());
      currentMethod.push("main");

      System.out.print("\n" + n.f0.tokenImage + " ");
      n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      System.out.print(n.f1.f0.toString());

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);

      System.out.println(" {");
      System.out.println("public static void main(String[] " + n.f11.f0.tokenImage + ") {");
      
      // n.f14.accept(this, argu);
      
      //print the register allocated variable adn spilled variable for main method
      if (GJDepthFirst_v1.uniqueRegisters.containsKey(currentClass.peek()) && GJDepthFirst_v1.uniqueRegisters.get(currentClass.peek()).containsKey(currentMethod.peek())) {
         for (int i = 0; i<GJDepthFirst_v1.uniqueRegisters.get(currentClass.peek()).get(currentMethod.peek()); i++) {
            System.out.println("Object R" +i+ ";");     
         }
      }
      if (GJDepthFirst_v1.spilledVariables.containsKey(currentClass.peek()) && GJDepthFirst_v1.spilledVariables.get(currentClass.peek()).containsKey(currentMethod.peek())) {
         if (GJDepthFirst_v1.spilledVariables.get(currentClass.peek()).get(currentMethod.peek()).size() == 0){
            System.out.println("alloca(0);");
         }
         else{
            System.out.println("alloca(" + GJDepthFirst_v1.spilledVariables.get(currentClass.peek()).get(currentMethod.peek()).size() + ");");
         }
      }
      else {
         System.out.println("alloca(0);");
      }

      n.f15.accept(this, argu);

      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      System.out.println("}");
      System.out.println("}");
      //pop current class and main method
      currentMethod.pop();
      currentClass.pop();
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      //push current class
      currentClass.push(n.f1.f0.toString());
      n.f0.accept(this, argu);
      System.out.print("\n"+n.f0.tokenImage + " ");
      n.f1.accept(this, argu);
      System.out.println(n.f1.f0.toString() + " {");
      n.f2.accept(this, argu);
      // n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      System.out.println("}");
      //pop current class
      currentClass.pop();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      //push current class
      currentClass.push(n.f1.f0.toString());
      n.f0.accept(this, argu);
      System.out.print("\n"+n.f0.tokenImage + " ");
      n.f1.accept(this, argu);
      System.out.print(n.f1.f0.toString() + " extends ");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println(n.f4.tokenImage + " {");
      n.f4.accept(this, argu);
      // n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      System.out.println("}");
      //pop current class
      currentClass.pop();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      //push current method
      currentMethod.push(n.f2.f0.toString());
      n.f0.accept(this, argu);
      System.out.print(n.f0.tokenImage + " ");
      n.f1.accept(this, argu);
      // System.out.print(n.f1.f0.tokenImage + " ");
      
      n.f2.accept(this, argu);
      System.out.print(n.f2.f0.toString() + " (");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println(") {");                     
      // n.f7.accept(this, argu);
       //print the register allocated variable adn spilled variable for main method
       if (GJDepthFirst_v1.uniqueRegisters.containsKey(currentClass.peek()) && GJDepthFirst_v1.uniqueRegisters.get(currentClass.peek()).containsKey(currentMethod.peek())) {
         for (int i = 0; i<GJDepthFirst_v1.uniqueRegisters.get(currentClass.peek()).get(currentMethod.peek()); i++) {
            System.out.println("Object R" +i+ ";");     
         }
      }
      if (GJDepthFirst_v1.spilledVariables.containsKey(currentClass.peek()) && GJDepthFirst_v1.spilledVariables.get(currentClass.peek()).containsKey(currentMethod.peek())) {
         if (GJDepthFirst_v1.spilledVariables.get(currentClass.peek()).get(currentMethod.peek()).size() == 0){
            System.out.println("alloca(0);");
         }
         else{
            System.out.println("alloca(" + GJDepthFirst_v1.spilledVariables.get(currentClass.peek()).get(currentMethod.peek()).size() + ");");
         }
      }
      else {
         System.out.println("alloca(0);");
      }

      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      System.out.print("return ");
      n.f10.accept(this, argu);
      //print the return identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f10.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f10.f0.toString()); 
      System.out.print(")");
      n.f11.accept(this, argu);
      System.out.println(";");
      n.f12.accept(this, argu);
      System.out.println("}");
      //pop current method
      currentMethod.pop();
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.print(n.f1.f0.toString());
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print(", ");
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | FloatType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if (n.f0.choice instanceof Identifier) {
         System.out.print(((Identifier)n.f0.choice).f0.tokenImage + " ");
         
      }
      else if (n.f0.choice instanceof ArrayType) {
         System.out.print("int[] ");
      }
      else if (n.f0.choice instanceof BooleanType) {
         System.out.print("boolean ");
      }
      else if (n.f0.choice instanceof IntegerType) {
         System.out.print("int ");
      }
      else if (n.f0.choice instanceof FloatType) {
         System.out.print("float ");
         
      }
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "float"
    */
   public R visit(FloatType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    *       | LivenessQueryStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("{");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("}");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String var = n.f0.f0.tokenImage;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int reg_index = searchVarRegister(currentClass.peek(), currentMethod.peek(), var);
      if (reg_index>-1) {
         System.out.print("R" + reg_index + " = ");
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         System.out.println(";");
      }
      int spill_index = searchVarSpill(currentClass.peek(), currentMethod.peek(), var);
      if (spill_index>-1) {
         System.out.print("store(" + spill_index + ", ");
         n.f2.accept(this, argu);
         //check if the expression is primary expression then if it is identifier then print the load statement
         if (n.f2.f0.choice instanceof Identifier) {
            System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(((Identifier)n.f2.f0.choice).f0.tokenImage)+") ");
            printLoadStatement(currentClass.peek(), currentMethod.peek(), ((Identifier)n.f2.f0.choice).f0.tokenImage);
            System.out.println(")");
         }
         n.f3.accept(this, argu);
         System.out.println(");");
      }
      if (reg_index == -1 && spill_index == -1) {
         System.out.print(var + " = ");
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         System.out.println(";");         
      }

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print(n.f0.f0.tokenImage + "[");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print(n.f2.f0.tokenImage + "]");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.print(" = ");
      n.f5.accept(this, argu);
      System.out.print(n.f5.f0.tokenImage);
      n.f6.accept(this, argu);
      System.out.println(";");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("if(");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      n.f3.accept(this, argu);
      System.out.println(") ");
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("if(");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      n.f3.accept(this, argu);
      System.out.println(") ");
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      System.out.println("else ");
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("while(");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      n.f3.accept(this, argu);
      System.out.println(") ");
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      System.out.print("System.out.println(");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString()));
      System.out.print(") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      // System.out.print(")");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println(");");
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <LIVENESSQUERY>
    * f2 -> <SCOMMENT2>
    */
   public R visit(LivenessQueryStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(" && ");
      n.f2.accept(this, argu);
      //print the second identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "||"
    * f2 -> Identifier()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(" || ");
      n.f2.accept(this, argu);
      //print the second identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<="
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(" " + n.f1.tokenImage + " ");
      n.f2.accept(this, argu);
      //print the second identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "!="
    * f2 -> Identifier()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(" " + n.f1.tokenImage + " ");
      n.f2.accept(this, argu);
      //print the second identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(" " + n.f1.tokenImage + " ");
      n.f2.accept(this, argu);
      //print the second identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(" " + n.f1.tokenImage + " ");
      n.f2.accept(this, argu);
      //print the second identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(" " + n.f1.tokenImage + " ");
      n.f2.accept(this, argu);
      //print the second identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "/"
    * f2 -> Identifier()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(" " + n.f1.tokenImage + " ");
      n.f2.accept(this, argu);
      //print the second identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print("[");
      n.f2.accept(this, argu);
      //print the second identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f2.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f2.f0.toString());
      System.out.print(")");
      n.f3.accept(this, argu);
      System.out.print("]");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(".");
      n.f2.accept(this, argu);
      System.out.print("length");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // System.out.print("(");
      //print the first identifier
      System.out.print("(");
      System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(n.f0.f0.toString())+") ");
      printLoadStatement(currentClass.peek(), currentMethod.peek(), n.f0.f0.toString());
      System.out.print(")");
      n.f1.accept(this, argu);
      System.out.print(".");
      n.f2.accept(this, argu);
      System.out.print(n.f2.f0.tokenImage);
      System.out.print("(");
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      System.out.print(")");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | FloatLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //check if the primary expression is identifier then print the load statement
      if (n.f0.choice instanceof Identifier) {
         System.out.print("("+GJDepthFirst_v1.symbolTableType.get(currentClass.peek()).get(currentMethod.peek()).get(((Identifier)n.f0.choice).f0.tokenImage)+") ");
         printLoadStatement(currentClass.peek(), currentMethod.peek(), ((Identifier)n.f0.choice).f0.tokenImage);
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print(n.f0.tokenImage);
      // return n.f0.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <FLOAT_LITERAL>
    */
   public R visit(FloatLiteral n, A argu) {
      R _ret=null;
      System.out.print(n.f0.tokenImage);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      System.out.print(n.f0.tokenImage);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      System.out.print(n.f0.tokenImage);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      // System.out.print(n.f0.tokenImage);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      System.out.print(n.f0.tokenImage);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print("new int[");
      n.f3.accept(this, argu);
      System.out.print(n.f3.f0.tokenImage + "]");
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("new ");
      n.f1.accept(this, argu);
      System.out.print(n.f1.f0.tokenImage + "()");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      System.out.print("!");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.print(n.f1.f0.tokenImage);
      return _ret;
   }

}

